import json
import time
from unittest.mock import patch, Mock

from freezegun import freeze_time
from pytest_schema import schema

from transport import hw_stats, local_network_publisher
from message_model import MessageModel



@freeze_time("2022-05-13T00:00:00")
@patch("transport.hw_stats.get_stats")
@patch("time.sleep")
@patch("socket.socket")
def test_local_network_publish(mock_socket, mock_sleep, mock_get_stats, mock_msg_data):
    """Check messages sent to the socket by a LocalNetworkPublisher."""
    # raise a KeyboardInterrut on the sleep call to break the infinite loop
    mock_sleep.side_effect = KeyboardInterrupt()

    mock_msg = MessageModel(**mock_msg_data)
    mock_get_stats.return_value = mock_msg

    p = local_network_publisher.LocalNetworkPublisher()
    p.publish()

    s = mock_socket.return_value.__enter__.return_value

    # socket connect
    s.connect.assert_called()

    # 1st data send
    # Compare messages without the timestamp as the fractional part might not match
    # TODO: use time_ns and nanoseconds instead?
    sent_msg_data = json.loads(s.send.call_args_list[0][0][0].decode())
    sent_msg_timestamp = sent_msg_data.pop("timestamp")

    expected_msg_data = mock_msg.model_dump()
    expected_msg_timestamp = expected_msg_data.pop("timestamp")

    assert sent_msg_data == expected_msg_data
    assert int(sent_msg_timestamp) == int(expected_msg_timestamp)

    # final data send:
    # KeyboardInterrupt should send a default message
    sent_msg_data = json.loads(s.send.call_args_list[1][0][0].decode())
    sent_msg_timestamp = sent_msg_data.pop("timestamp")

    default_msg_data = MessageModel().model_dump()
    default_msg_timestamp = default_msg_data.pop("timestamp")

    assert sent_msg_data == default_msg_data
    assert int(sent_msg_timestamp) == int(default_msg_timestamp)

    # socket close
    s.close.assert_called()

@patch("transport.hw_stats.psutil")
@patch("transport.hw_stats.pynvml")
def test_get_stats_schema(mock_pynvml, mock_psutil):
    """Validate the schema generated by hw_stats matches the MessageModel."""
    # Mock pynvml calls
    mock_pynvml.nvmlDeviceGetMemoryInfo.return_value = Mock(used=2*10**6, total=3*10**6)
    mock_pynvml.nvmlDeviceGetUtilizationRates.return_value = Mock(gpu=52)
    mock_pynvml.nvmlDeviceGetTemperature.return_value = 40

    # Mock psutil calls
    mock_psutil.sensors_temperatures.return_value = {
        "coretemp": [Mock(label="#1", current=26), Mock(label="#2", current=28), Mock(label="#3", current=28)]
    }
    mock_psutil.virtual_memory.return_value = Mock(total=5000, used=601, available=2000)
    mock_psutil.getloadavg.return_value = [0.28]

    # This will raise a ValidationError if get_stats couldn't create a
    #  MessageModel
    hw_stats.get_stats()

    assert type(hw_stats.get_stats()) == MessageModel
